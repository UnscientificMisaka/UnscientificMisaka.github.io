---
layout:     post
title:      "HTTP架构"
subtitle:    "刚接触node.js"
date:       2016-12-28 14:05:00
author:     "LRZ"
header-img: "img/16-12-28(1).jpg"
tags:
    - Node.js
---  

>这几天了解了一点nodejs,大概知道了客户端和服务器之间是怎么一回事。

### 1.HTTP架构
1.HTTP是客户端-服务端模式中请求-响应所用的协议。客户端向服务器提交http请求，服务器响应请求的资源。HTTP1.0中客户端和服务器只保持短暂连接，浏览器每次发送请求与服务器建立一个TCP连接，服务器处理完成请求后立即断开TCP连接。但当浏览器访问一个包含图像的网页时，浏览器首先发出  对该网页文件的请求，服务器响应并返回该网页文件，浏览器解析网页的内容发现img标签中的地址后，浏览器再次根据src指向的地址发出请求。这样子的话，每次请求响应都要建立连接，客户端和服务器建立和关闭连接比较费时。   

2.HTTP1.1应运而生，它支持持久连接，在一个TCP连接上可以传送多个HTTP请求和响应，这种方式可重用连接读取图片脚本等资源。同时还允许客户端不用等待上一次结果返回就可以发送下一次请求，但服务器端必须按照客户端发送的请求顺序返回响应结果。HTTP1.1扩充了请求头文件字段，如Host,这样浏览器在请求响应时可以明确表达访问哪个站点，服务器可以在同一个IP地址和端口上配置多个虚拟web站点。  

3.从根本上讲，HTTP是半双工协议，同一时刻信息只能单向流动，在时效性高的网站如新闻天气等，要得到最新的信息，必须不断刷新。轮询为此产生，客户端向服务器发送请求查看最新信息，请求以固定的时间间隔发出，不管是否有信息，客户端都会得到响应，如果有可用信息，服务器发送这些信息，若没有返回一个拒绝响应，客户端关闭连接。当然这些只适用于信息交互有固定时间的情况下，在无规律的数据更新中会发出很多不必要的请求。  
为了优化又产生了长轮询，客户端向服务器请求信息，在设定的时间段内打开一个连接，服务器如果没有任何信息会保持请求打开，直到有客户端所需要的信息或超出指定的时间为止。这个时候，客户端再次向服务器发送请求信息。长轮询只是模拟HTTP持续连接，虽然是由非持续的HTTP连接组成的，但可以类似让客户端保持着等待响应状态。
### 2.服务器  
传统的服务器比如appache中，每次有新用户访问，服务器打开一个连接，每个连接需要一个进程，这些进程大部分时间是闲着的，但仍然占用内存，当连接的用户超过一定数量，服务器内存不够直接瘫痪，nodejs的非阻塞和事件驱动就是为了解决这种高并发的情况，关于这种术语我也很懵暂时，过几天再补上。  
