---
layout:     post
title:      "Fastify"
subtitle:    "号称速度超快的轻量级框架"
date:       2017-11-05 22:39:00
author:     "LRZ"
header-img: "img/16-12-8.jpg"
tags:
    - JavaScript
---  


最近fastify这个Node.js框架忽然冒出头来了，介绍一下这个框架吧，额，我当然不会介绍如何使用它，用它自己去看API文档，虽然有些噱头，但在下目前首选还是koa，框架周边的生态还是很重要的。  
fastify快在哪里，一个是json的输出快，对node做api层的场景还是很适用的，另一个是作了对象池化。
## JSON

fastify的benchmark比koa快20%，在serialization这块，2.x倍faster than JSON.stringify  
比原生的JSON.stringify快是因为它用了schema, 避免了每次转json都要遍历所有的key value，根据参数类型执行不同方法转换。
有了schema提前知道了类型，省下了类型判断，遍历的开销。虽然生成的json字符串是js代码，据JIT优化和原生的比较起来不差。
下边是自己做的一个benchmark结果：  
![](/img/in-post/2017-11-05/benchmark.png)   
使用schema用js代码转的ops明显高于内置原生实现.
翻到作者第一次commit的记录，build的代码如下：
```
function build(schema) {
    let code = `
        let json ='{'
    `

    Object.keys(schema.properties).forEach((key, i, a) => {
        const type = schema.properties[key].type
        code += `
            json += '"${key}":'
        `
        
        switch (type) {
            case 'string':
                code += `
                    json += '""' + obj.${key} + '"'
                `
                break;
            case 'integer':
                code += `
                json += '' + obj.${key}
            `
            break;
            default:
                throw new Error(`${type} unsupported`)
        }

        if (i < a.length - 1) {
            code += 'json += \',\''
        }
    })

    code += `
        json+='}'
        return json
    `

    return new Function('obj', code)
}
```
当然这只是个雏形，还有很多情况包括过滤等都未处理，但确实使用schema是比原生要快的。 

## 对象池化  
比较像设计模式中的享元模式，对对象做复用。每次有新的请求进来，koa是创建了context对象作为上下文。在请求量较大的时候，上下文频繁被创建和回收。对象池化就是为了尽量避免创建回收的开销，类似线程池。重复使用同一个对象可以降低GC的压力，如果生命周期较短，作为年轻代被GC回收的情况会大大减少，生命周期长可以避免晋升为老年代。源码的处理如下：
```
function reusify (Constructor) {
  var head = new Constructor()

  function get () {
    var current = head

    if (current.next) {
      head = current.next
    } else {
      head = new Constructor()
    }

    current.next = null

    return current
  }

  function release (obj) {
    head.next = obj
  }

  return {
    get: get,
    release: release
  }
}
```  
十几行代码很精简，享元模式的大部分状态都可以外部化，而在fastify这个框架中是怎么用的呢，在中间件的使用上，fastify传入了一个叫Holder的构造函数进去，它包含了request,response,context等对象，并还有一个done方法，done方法里重置了对象的属性。中间件运行的时候会从reusify(Holder)即这个对象池中get出来当前对象,如果有下一个要运行的中间件，会将当前上下文对象向下走。直到出错或中间件走到尽头将对象release掉。所以每来一个请求，从池中取出对象，初始化，然后调用done方法release掉还原对象。具体中间件运行的源码可以点[这里](https://github.com/fastify/middie/blob/master/middie.js)，至我谢谢这段文字这里只有20个star，reusify也只有43个star。除去fastify框架而看，确实两个repo代码并没有惊艳的地方，放在一起加上json schema着实提高了它的性能，基于json schema的stringfiy的repo的star蛮多的有四百多个。  
按照repo里的benchmark测试了一下，模拟高cpu负载下的表现，分别循环一亿次斐波那契求值到30，50，然而实际的表现是不池化的代码更快一点：
![](/img/in-post/2017-11-05/reuse.png) 
![](/img/in-post/2017-11-05/reuse2.png) 
官方给出的基准测试数据是求到100位的时候池化对象的表现是比不池化要快的，这个要测试对我的本本来说耗时有点长...

## 路由  
还有一个值得一提的是fastify的路由系统基于radix tree实现，继续拿benchmark数据出来，它的路由模块叫find-my-way 总计qps达到了309,842 ops/sec，老牌express是91,631 ops/sec，koa是44,596 ops/sec。radix tree插入删除查找复杂度都是O(n)。  
而koa和express的查找匹配是基于layer将path转成正则进行匹配。  
关于其中基于radix的具体实现机制，我要睡觉了，明天还要搬砖，:-(